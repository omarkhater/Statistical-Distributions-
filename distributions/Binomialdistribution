import math
import matplotlib as plt
from .Generaldistribution import Distribution



class Binomial(Distribution):

    """ Binomial distribution class for calculating and 
    visualizing a Binomial distribution.
    
    Attributes:
        mean (float) representing the mean value of the distribution
        stdev (float) representing the standard deviation of the distribution
        data_list (list of floats) a list of floats to be extracted from the data file
        p (float) representing the probability of an event occurring
        n (int) number of trials
    
    BackGround: 
        * A binomial distribution is defined by two variables: 
            - Probability of getting a positive outcome
            - Number of trials
    
        * If you know these two values, you can calculate the mean and 
            the standard deviation
           
    Example:
        If you flip a fair coin 25 times, p = 0.5 and n = 25
        You can then calculate the mean and standard deviation with 
        the following formula:
               mean = p * n
               standard deviation = sqrt(n * p * (1 - p))         
    """
    

    def __init__(self,p = .5, n = 25):

        """Function to initialize binomial Distribution attributes using 
        general Distribution class.
        
        Args:
            p : Number of positive outcomes.
            n : Total number of trials.
            
        Returns:
            None
        """
        self.p = p
        self.n = n
        mu = self.calculate_mean()
        sigma = self.calculate_stdev()
        Distribution.__init__(self, mu, sigma)

    def calculate_mean(self):

        """Function to calculate the mean from p and n
        
        Args: 
            None
        
        Returns: 
            float: mean of the data set
    
        """
        self.mean = self.p * self.n
        return self.mean



    def calculate_stdev(self):

        """Function to calculate the standard deviation from p and n.
        
        Args: 
            None
        
        Returns: 
            float: standard deviation of the data set
    
        """
        self.stdev = math.sqrt(self.n * self.p * (1-self.p))
        return self.stdev

    def replace_stats_with_data(self):

        """Function to calculate p and n from the data set. 
        The function updates the p and n variables of the object.
        
        Args: 
            None
        
        Returns: 
            float: the p value
            float: the n value
    
        """

        self.n = len(self.data)
        self.p = sum([1 for j in self.data if j==1])/float(self.n)
        self.mean = self.calculate_mean()
        self.stdev = self.calculate_stdev()

        return self.p,self.n

    def plot_bar(self):

        """Function to output a histogram of the instance variable data using 
        matplotlib pyplot library.
        
        Args:
            None
            
        Returns:
            None
        """
        plt.bar(x = ['0', '1'], height = [(1 - self.p) * self.n, self.p * self.n])
        plt.xlabel('Outcome')
        plt.ylabel('Count')
        plt.title('Bar plot of the data')

    def pdf(self,k):

        """Probability density function calculator for the binomial distribution.
        
        Args:
            k (float): point for calculating the probability density function
            
        
        Returns:
            float: probability density function output
        """
        a1 = math.factorial(self.n)/(math.factorial(k) * math.factorial(self.n - k))
        a2 = self.p ** k * (1-self.p) ** (self.n - k)
        return a1*a2

    def plot_histogram_pdf(self):

        """Function to plot the pdf of the binomial distribution
        
        Args:
            None
        
        Returns:
            list: x values for the pdf plot
            list: y values for the pdf plot
            
        """
        x = []
        y = []

        for k in range(self.n + 1):
            x.append(k)
            y.append(self.pdf(k))

        # make the plots
        plt.bar(x, y)
        plt.title('Distribution of Outcomes')
        plt.ylabel('Probability')
        plt.xlabel('Outcome')

        plt.show()

        return x,y

    def __add__(self,other):

        """Function to add together two Binomial distributions with equal p
        
        Args:
            other (Binomial): Binomial instance
            
        Returns:
            Binomial: Binomial distribution
            
        """

        try:
            assert self.p == other.p, 'p values are not equal'
        except AssertionError as error:
            raise error

        new = Binomial()
        new.p = self.p
        new.n = self.n + other.n
        new.calculate_mean()
        new.calculate_stdev()

        return new


                        

    def __repr__(self):
        """Function to output the characteristics of the Binomial instance
        
        Args:
            None
        
        Returns:
            string: characteristics of the Binomial object
        
        """


        return 'mean {}, standard deviation {}, p {}, n {}'\
            .format(round(self.mean,2), round(self.stdev,2), round(self.p,2)
            , round(self.n,2))
